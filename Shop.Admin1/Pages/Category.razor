@page "/category"
@using Shop.DataModels.CustomModels;
@using Shop.Admin1.Services;
@inject IAdminPanelService adminPanelService;

<style>

    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0,0,0);
        background-color: rgb(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

@if (categoryModel == null)
{
    <p><em>Bekleyiniz...</em></p>
}
else
{
    <div class="card">
        <h4 class="card-header">Category</h4>

        <div class="card-body">
            <EditForm Model="@categoryModel" OnValidSubmit="SaveCategory">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <div class="form-group col-5">
                        <label>Name :</label>
                        <InputText @bind-Value="categoryModel.Name" class="form-control" />
                        <ValidationMessage For="@(() => categoryModel.Name)" />
                    </div>
                </div>
                <div class="text-left">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <input type="button" class="btn btn-primaty" value="Clear" @onclick="ClearForm" />
                </div>
            </EditForm>
        </div>

        <div class="card-body bg-dark">
            @if (categoryList == null)
            {
                <p><em>Bekleyiniz...</em></p>
            }
            else
            {
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                        <tr>
                            <th style="width:15px;">Sr.No</th>
                            <th>Kategori İsmi</th>
                            <th style="width:80px;">Edit?</th>
                            <th style="width:80px;">Delete?</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (index, cat) in categoryList.Select((cat, i) => (i + 1, cat)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@cat.Name</td>
                                <td> <input type="button" class="btn btn-primary" value="Edit" @onclick="(() => EditButtonClick(cat))" /></td>
                                <td> <input type="button" class="btn btn-primary" value="Delete" @onclick="(() => DeleteButtonClick(cat))" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@if (showEditPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="model-header">
                <h5>Kategoriyi Düzenle</h5>
                <span class="close" @onclick="ToggleEditPopup">&times;</span>
            </div>
            <div class="modal-body">
                <EditForm Model="@categoryToUpdate" OnValidSubmit="UpdateCategory">
                    <DataAnnotationsValidator />
                    <div class="form-row">
                        <div class="form-group col-5">
                            <label>İsim :</label>
                            <InputText @bind-Value="categoryToUpdate.Name" class="form-control" />
                            <ValidationMessage For="@(() => categoryToUpdate.Name)" />
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Update" @onclick="UpdateCategory" />
                <input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleEditPopup" />
            </div>
        </div>
    </div>
}






@if (showDeletePopup == true)
{
    <div class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Kategori Sil</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Silmek istediğinize Emin misiniz? <span style="background-color:yellow;">@categoryToDelete.Name ?</span> Category
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="DeleteCategory">Yes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
}

@if (successPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}


@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public CategoryModel categoryModel { get; set; }
    public List<CategoryModel> categoryList { get; set; }
    public CategoryModel categoryToUpdate { get; set; }
    public CategoryModel categoryToDelete { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool successPopup = false;
    public string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        categoryModel = new CategoryModel();
        await GetCatgories();
    }

    private async Task SaveCategory()
    {
        await adminPanelService.SaveCategory(categoryModel);

        Message = "Category Added Successfully !!";
        ToggleSuccessPopup();
        categoryModel = new CategoryModel();
        await GetCatgories(); //buraları GetCatGories diye giriyor
    }

    private async Task UpdateCategory()
    {
        bool flag = await adminPanelService.UpdateCategory(categoryToUpdate);
        ToggleEditPopup();
        if (flag)
        {
            Message = "Kategori başarıyla eklendi !!";
        }
        else
        {
            Message = "Kategori Eklenemedi !!";
        }
        ToggleSuccessPopup();
        categoryToUpdate = new CategoryModel();
        await GetCatgories(); //buraları GetCatGories diye giriyor
    }
    private async Task DeleteCategory()
    {
        bool flag = await adminPanelService.DeleteCategory(categoryToDelete);
        ToggleDeletePopup();
        if (flag)
        {
            Message = "Kategori Başarıyla Silindi !!";
        }
        else
        {
            Message = "Kategori Silinemedi Yeniden Deneyin !!";
        }
        ToggleSuccessPopup();
        categoryModel = new CategoryModel();
        await GetCatgories(); //buraları GetCatGories diye giriyor
    }

    private async Task GetCatgories()
    {
        categoryList = await adminPanelService.GetCategories();
    }

    private void ClearForm()
    {
        categoryModel = new CategoryModel();
    }

    private void EditButtonClick(CategoryModel _categoryToUpdate)
    {
        categoryToUpdate = _categoryToUpdate;
        ToggleEditPopup();
    }

    private void DeleteButtonClick(CategoryModel _categoryToDelete) //categroy giriyo
    {
        categoryToDelete = _categoryToDelete;
        ToggleDeletePopup();
    }

    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }

    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        successPopup = successPopup == true ? false : true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
